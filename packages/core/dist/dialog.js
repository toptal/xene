"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dialog = void 0;
const manager_1 = require("./manager");
const pause_1 = require("./actions/pause");
const parse_1 = require("./actions/parse");
const question_1 = require("./actions/question");
const isMessage = (arg) => arg != null && typeof arg !== 'function';
const errorHandler = (say, arg) => isMessage(arg) ? () => say(arg) : arg;
class Dialog {
    get user() { return this.users[0]; }
    constructor(bot, channel, users) {
        this.isPaused = false;
        this.bot = bot;
        this.users = users;
        this.channel = channel;
        this._manager = new manager_1.Manager(bot, channel, users);
        this.parse = this.parse.bind(this);
        this.ask = this.ask.bind(this);
        this.say = this.say.bind(this);
    }
    on(event, callback) {
        this._manager.on(event, callback);
    }
    end() {
        this._manager.emit('end');
        this._manager.unbind();
    }
    pause(message) {
        this.isPaused = true;
        this._manager.emit('pause');
        const handler = () => this.say(message, false);
        this._manager.add(new pause_1.Pause(handler));
    }
    say(message, unpause = true) {
        this._manager.emit('outgoingMessage', this.channel, message);
        if (this.isPaused && unpause) {
            this._manager.unpause();
            this._manager.emit('unpause');
            this.isPaused = false;
        }
        return this.bot.say(this.channel, message);
    }
    parse(parser, onError) {
        const parserObj = new parse_1.Parse(parser, errorHandler(this.say, onError));
        this._manager.add(parserObj);
        return parserObj.promise;
    }
    ask(message, parser, onError) {
        const sayMessage = () => this.say(message);
        const question = new question_1.Question(sayMessage, parser, errorHandler(this.say, onError));
        this._manager.add(question);
        return question.promise;
    }
}
exports.Dialog = Dialog;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RpYWxvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx1Q0FBbUM7QUFDbkMsMkNBQXVDO0FBQ3ZDLDJDQUF1QztBQUN2QyxpREFBNkM7QUFHN0MsTUFBTSxTQUFTLEdBQUcsQ0FBSSxHQUFHLEVBQWlCLEVBQUUsQ0FDMUMsR0FBRyxJQUFJLElBQUksSUFBSSxPQUFPLEdBQUcsS0FBSyxVQUFVLENBQUE7QUFFMUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUE0QixFQUFFLENBQzFELFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUE7QUFFdkMsTUFBYSxNQUFNO0lBVWpCLElBQUksSUFBSSxLQUFLLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFbkMsWUFBWSxHQUFRLEVBQUUsT0FBZSxFQUFFLEtBQWU7UUFMdEQsYUFBUSxHQUFZLEtBQUssQ0FBQTtRQU12QixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQTtRQUNkLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO1FBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxpQkFBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDaEQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNsQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzlCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDaEMsQ0FBQztJQVFELEVBQUUsQ0FBQyxLQUFhLEVBQUUsUUFBaUM7UUFDakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFRCxHQUFHO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDekIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUN4QixDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQW1CO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFBO1FBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzNCLE1BQU0sT0FBTyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQzlDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksYUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDdkMsQ0FBQztJQUVELEdBQUcsQ0FBQyxPQUFtQixFQUFFLFVBQW1CLElBQUk7UUFDOUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUM1RCxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksT0FBTyxFQUFFO1lBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUE7WUFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7WUFDN0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUE7U0FDdEI7UUFDRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDNUMsQ0FBQztJQU9ELEtBQUssQ0FBSSxNQUFvQixFQUFFLE9BQStDO1FBQzVFLE1BQU0sU0FBUyxHQUFHLElBQUksYUFBSyxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFBO1FBQ3BFLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQzVCLE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQTtJQUMxQixDQUFDO0lBUUQsR0FBRyxDQUFJLE9BQW1CLEVBQUUsTUFBb0IsRUFBRSxPQUErQztRQUMvRixNQUFNLFVBQVUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzFDLE1BQU0sUUFBUSxHQUFHLElBQUksbUJBQVEsQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUE7UUFDbEYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDM0IsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFBO0lBQ3pCLENBQUM7Q0FDRjtBQTdFRCx3QkE2RUMifQ==