"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Channels = void 0;
const lodash_1 = require("lodash");
const base_1 = require("./base");
const get_1 = require("../helpers/get");
class Channels extends base_1.APIModule {
    constructor() {
        super(...arguments);
        this.archive = (channel) => this.request('archive', { channel });
        this.create = (name, validate = false) => this.request('create', { name, validate }).then((0, get_1.get)('channel'));
        this.history = (channel, options) => this.request('history', Object.assign({ channel }, options)).then((0, get_1.get)('messages'));
        this.info = (channel) => this.request('info', { channel }).then((0, get_1.get)('channel'));
        this.invite = (channel, user) => this.request('invite', { channel, user }).then((0, get_1.get)('channel'));
        this.join = (channel) => this.request('join', { name: channel }).then((0, get_1.get)('channel'));
        this.kick = (channel, user) => this.request('kick', { channel, user });
        this.leave = (channel) => this.request('leave', { channel });
        this.list = () => this.request('list').then((0, get_1.get)('channels'));
        this.mark = (channel, ts) => this.request('mark', { channel, ts });
        this.rename = (channel, name, validate = true) => this.request('rename', { channel, name, validate }).then((0, get_1.get)('channel'));
        this.replies = (channel, threadTs) => this.request('rename', { channel, threadTs }).then((0, get_1.get)('messages'));
        this.setPurpose = (channel, purpose) => this.request('setPurpose', { channel, purpose });
        this.setTopic = (channel, topic) => this.request('setTopic', { channel, topic });
        this.unarchive = (channel) => this.request('unarchive', { channel });
        this.getMessage = (channel, ts) => this.history(channel, { inclusive: true, count: 1, latest: ts }).then(lodash_1.head);
    }
}
exports.Channels = Channels;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBpL2NoYW5uZWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUE2QjtBQUU3QixpQ0FBa0M7QUFDbEMsd0NBQW9DO0FBSXBDLE1BQWEsUUFBUyxTQUFRLGdCQUFTO0lBQXZDOztRQUNFLFlBQU8sR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUV0QyxXQUFNLEdBQUcsQ0FBQyxJQUFZLEVBQUUsV0FBb0IsS0FBSyxFQUFFLEVBQUUsQ0FDbkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBQSxTQUFHLEVBQVUsU0FBUyxDQUFDLENBQUMsQ0FBQTtRQUUxRSxZQUFPLEdBQUcsQ0FBQyxPQUFlLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLGtCQUFJLE9BQU8sSUFBSyxPQUFPLEVBQUcsQ0FBQyxJQUFJLENBQUMsSUFBQSxTQUFHLEVBQVksVUFBVSxDQUFDLENBQUMsQ0FBQTtRQUVuRixTQUFJLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUEsU0FBRyxFQUFVLFNBQVMsQ0FBQyxDQUFDLENBQUE7UUFFakUsV0FBTSxHQUFHLENBQUMsT0FBZSxFQUFFLElBQVksRUFBRSxFQUFFLENBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUEsU0FBRyxFQUFVLFNBQVMsQ0FBQyxD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